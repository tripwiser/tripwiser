import { Share, Alert } from 'react-native';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';
import { Trip, PackingItem } from '../types';

export interface ShareOptions {
  includePackedItems?: boolean;
  includeNotes?: boolean;
  format: 'text' | 'pdf' | 'link';
}

export const generatePackingListText = (trip: Trip, options: ShareOptions = { format: 'text' }): string => {
  const { includePackedItems = true, includeNotes = false } = options;
  
  let content = `üß≥ ${trip.name} - Packing List\n`;
  content += `üìç ${trip.destination}\n`;
  content += `üìÖ ${new Date(trip.startDate).toLocaleDateString()} - ${new Date(trip.endDate).toLocaleDateString()}\n`;
  content += `üë• ${trip.travelers} traveler${trip.travelers > 1 ? 's' : ''}\n\n`;
  
  // Group items by category
  const categories = trip.packingList.reduce((acc, item) => {
    if (!acc[item.category]) {
      acc[item.category] = [];
    }
    acc[item.category].push(item);
    return acc;
  }, {} as Record<string, PackingItem[]>);
  
  Object.entries(categories).forEach(([category, items]) => {
    content += `üì¶ ${category.toUpperCase()}\n`;
    
    items.forEach(item => {
      if (!includePackedItems && item.packed) return;
      
      const status = item.packed ? '‚úÖ' : '‚¨ú';
      const priority = item.essential ? ' ‚≠ê' : '';
      const assignment = item.assignedTo ? ` (${item.assignedTo})` : '';
      
      content += `${status} ${item.name}${priority}${assignment}\n`;
      
      if (includeNotes && item.notes) {
        content += `   üí¨ ${item.notes}\n`;
      }
    });
    
    content += '\n';
  });
  
  // Add statistics
  const totalItems = trip.packingList.length;
  const packedItems = trip.packingList.filter(item => item.packed).length;
  const essentialItems = trip.packingList.filter(item => item.essential).length;
  
  content += `üìä STATISTICS\n`;
  content += `‚Ä¢ Total items: ${totalItems}\n`;
  content += `‚Ä¢ Packed: ${packedItems}/${totalItems} (${Math.round((packedItems/totalItems) * 100)}%)\n`;
  content += `‚Ä¢ Essential items: ${essentialItems}\n\n`;
  
  content += `Generated by TripKit üöÄ`;
  
  return content;
};

export const sharePackingList = async (trip: Trip, options: ShareOptions = { format: 'text' }): Promise<void> => {
  try {
    const content = generatePackingListText(trip, options);
    
    if (options.format === 'text') {
      await Share.share({
        message: content,
        title: `${trip.name} - Packing List`,
      });
    } else if (options.format === 'link') {
      // Generate a shareable link (in a real app, this would upload to a server)
      const shareableLink = `https://tripkit.app/shared-list/${trip.id}`;
      await Share.share({
        message: `Check out my packing list for ${trip.name}!\n\n${shareableLink}\n\nCreated with TripKit`,
        title: `${trip.name} - Packing List`,
      });
    } else if (options.format === 'pdf') {
      // For PDF generation, we'd need a more complex solution
      // For now, we'll just share as text with a note about PDF feature
      Alert.alert(
        'PDF Export',
        'PDF export is coming soon! For now, sharing as text.',
        [
          { text: 'OK', onPress: () => sharePackingList(trip, { ...options, format: 'text' }) }
        ]
      );
    }
  } catch (error) {
    console.error('Error sharing packing list:', error);
    Alert.alert('Error', 'Failed to share packing list');
  }
};

export const generatePackingListHTML = (trip: Trip, options: ShareOptions = { format: 'text' }): string => {
  const { includePackedItems = true, includeNotes = false } = options;
  
  let html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${trip.name} - Packing List</title>
      <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; }
        .header { border-bottom: 2px solid #4F46E5; padding-bottom: 20px; margin-bottom: 30px; }
        .title { font-size: 28px; font-weight: bold; color: #1F2937; margin: 0; }
        .subtitle { color: #6B7280; margin: 10px 0; }
        .category { font-size: 20px; font-weight: bold; color: #4F46E5; margin: 25px 0 15px 0; }
        .item { margin: 8px 0; padding: 8px; border-radius: 6px; }
        .item.packed { background-color: #F0FDF4; }
        .item.unpacked { background-color: #FFFBEB; }
        .essential { color: #EA580C; font-weight: bold; }
        .assigned { color: #2563EB; font-size: 14px; }
        .notes { color: #6B7280; font-style: italic; margin-left: 20px; }
        .stats { background-color: #F9FAFB; padding: 20px; border-radius: 8px; margin-top: 30px; }
        .footer { text-align: center; color: #9CA3AF; margin-top: 30px; font-size: 14px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1 class="title">üß≥ ${trip.name}</h1>
        <div class="subtitle">
          üìç ${trip.destination}<br>
          üìÖ ${new Date(trip.startDate).toLocaleDateString()} - ${new Date(trip.endDate).toLocaleDateString()}<br>
          üë• ${trip.travelers} traveler${trip.travelers > 1 ? 's' : ''}
        </div>
      </div>
  `;
  
  // Group items by category
  const categories = trip.packingList.reduce((acc, item) => {
    if (!acc[item.category]) {
      acc[item.category] = [];
    }
    acc[item.category].push(item);
    return acc;
  }, {} as Record<string, PackingItem[]>);
  
  Object.entries(categories).forEach(([category, items]) => {
    html += `<div class="category">üì¶ ${category.toUpperCase()}</div>`;
    
    items.forEach(item => {
      if (!includePackedItems && item.packed) return;
      
      const status = item.packed ? '‚úÖ' : '‚¨ú';
      const itemClass = item.packed ? 'packed' : 'unpacked';
      const priority = item.essential ? ' <span class="essential">‚≠ê Essential</span>' : '';
      const assignment = item.assignedTo ? ` <span class="assigned">(${item.assignedTo})</span>` : '';
      
      html += `<div class="item ${itemClass}">${status} ${item.name}${priority}${assignment}</div>`;
      
      if (includeNotes && item.notes) {
        html += `<div class="notes">üí¨ ${item.notes}</div>`;
      }
    });
  });
  
  // Add statistics
  const totalItems = trip.packingList.length;
  const packedItems = trip.packingList.filter(item => item.packed).length;
  const essentialItems = trip.packingList.filter(item => item.essential).length;
  
  html += `
    <div class="stats">
      <div class="category">üìä STATISTICS</div>
      <div>‚Ä¢ Total items: ${totalItems}</div>
      <div>‚Ä¢ Packed: ${packedItems}/${totalItems} (${Math.round((packedItems/totalItems) * 100)}%)</div>
      <div>‚Ä¢ Essential items: ${essentialItems}</div>
    </div>
    
    <div class="footer">
      Generated by TripKit üöÄ
    </div>
    
    </body>
    </html>
  `;
  
  return html;
};

export const exportPackingListHTML = async (trip: Trip, options: ShareOptions = { format: 'text' }): Promise<void> => {
  try {
    const html = generatePackingListHTML(trip, options);
    const fileName = `${trip.name.replace(/[^a-zA-Z0-9]/g, '_')}_packing_list.html`;
    const fileUri = FileSystem.documentDirectory + fileName;
    
    await FileSystem.writeAsStringAsync(fileUri, html);
    
    if (await Sharing.isAvailableAsync()) {
      await Sharing.shareAsync(fileUri, {
        mimeType: 'text/html',
        dialogTitle: `Share ${trip.name} Packing List`,
      });
    } else {
      Alert.alert('Error', 'Sharing is not available on this device');
    }
  } catch (error) {
    console.error('Error exporting HTML:', error);
    Alert.alert('Error', 'Failed to export packing list');
  }
};